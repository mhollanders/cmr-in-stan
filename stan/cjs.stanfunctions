/** 
 * Cormack-Jolly-Seber individual log likelihoods. Function is overloaded:
 *  1. log_phi and logit_p per survey
 *  2. log_phi and logit_p per individual and survey
 *
 * @param y        Detection history
 * @param f_l      First and last survey detected
 * @param log_phi  Log survival probabilities
 * @param logit_p  Detection logits
 *
 * @return  Individual log likelihoods
 */
vector cjs(data array[,] int y, data array[,] int f_l, vector log_phi, 
           vector logit_p) {
  int I = size(y), J = size(y[1]), Jm1 = J - 1;
  vector[Jm1] log1m_p = log1m_inv_logit(logit_p), 
              log_phi_1mp = log_phi + log1m_p,
              chi;
  matrix[J, Jm1] alive_not_detected;
  for (j in 1:Jm1) {
    int jp1 = j + 1;
    alive_not_detected[jp1:, j] = cumulative_sum(log_phi_1mp[j:]);
    chi[j] = log1m_exp(log_sum_exp(alive_not_detected[jp1:, j] + logit_p[j:]));
  }
  vector[I] log_lik = zeros_vector(I);
  for (i in 1:I) {
    int f = f_l[i, 1], l = f_l[i, 2];
    if (f < l) {
      log_lik[i] += alive_not_detected[l, f]
                    + dot_product(to_vector(y[i, f + 1:l]), logit_p[f:l - 1]);
    }
    if (l < J) {
      log_lik[i] += chi[l];
    }
  }
  return log_lik;
}

vector cjs(data array[,] int y, data array[,] int f_l, matrix log_phi, 
           matrix logit_p) {
  int I = size(y), J = size(y[1]), Jm1 = J - 1;
  vector[Jm1] log1m_p, log_phi_1mp;
  vector[I] log_lik = zeros_vector(I);
  for (i in 1:I) {
    int f = f_l[i, 1], l = f_l[i, 2];
    log1m_p[f:] = log1m_inv_logit(logit_p[f:, i]);
    log_phi_1mp = log_phi[f:, i] + log1m_p[f:];
    if (f < l) {
      int lm1 = l - 1;
      log_lik[i] += sum(log_phi_1mp[f:lm1])
                    + dot_product(to_vector(y[i, f + 1:l]), logit_p[f:lm1, i]);
    }
    if (l < J) {
      log_lik[i] += log1m_exp(log_sum_exp(cumulative_sum(log_phi_1mp[l:])
                                          + logit_p[l:, i]));
    }
  }
  return log_lik;
}

/**
 * Robust design Cormack-Jolly-Seber individual log likelihoods. Function is 
 * overloaded:
 *  1. log_phi and logit_p per survey/secondary
 *  2. log_phi and logit_p per individual and survey/secondary
 *
 * @param y        Detection history
 * @param f_l      First and last survey detected
 * @param K        Number of secondaries per survey
 * @param f_k      First secondary of f detected
 * @param log_phi  Log survival probabilities
 * @param logit_p  Detection logits
 *
 * @return  Individual log-likelihoods
 */
vector cjs_rd(data array[,,] int y, data array[,] int f_l, data array[] int K, 
              data array[] int f_k, vector log_phi, matrix logit_p) {
  int I = size(y), J = size(y[1]), Jm1 = J - 1, K_max = max(K);
  matrix[K_max, J] log1m_p = log1m_inv_logit(logit_p);
  vector[J] log1m_P, log_P;
  for (j in 1:J) {
    log1m_P[j] = sum(log1m_p[1:K[j], j]);
  }
  log_P = log1m_exp(log1m_P);
  vector[Jm1] log_phi_1mP = log_phi + log1m_P[2:], chi;
  matrix[J, Jm1] alive_not_detected;
  for (j in 1:Jm1) {
    int jp1 = j + 1;
    alive_not_detected[jp1:, j] = cumulative_sum(log_phi_1mP[j:]);
    chi[j] = log1m_exp(log_sum_exp(alive_not_detected[jp1:, j]
                                   - log1m_P[jp1:] + log_P[jp1:]));
  }
  vector[I] log_lik = zeros_vector(I);
  for (i in 1:I) {
    int f = f_l[i, 1], l = f_l[i, 2];
    for (k in 1:K[f]) {
      if (k != f_k[i]) {
        log_lik[i] += log1m_p[k, f] + y[i, f, k] * logit_p[k, f];
      }
    }
    if (f < l) {
      int fp1 = f + 1;
      log_lik[i] += alive_not_detected[l, f] 
                    + sum(rows_dot_product(to_matrix(y[i, fp1:l])',
                                           logit_p[:, fp1:l]));
    }
    if (l < J) {
      log_lik[i] += chi[l];
    }
  }
  return log_lik;
}
 
vector cjs_rd(data array[,,] int y, data array[,] int f_l, data array[] int K, 
              data array[] int f_k, matrix log_phi, array[] matrix logit_p) {
  int I = size(y), J = size(y[1]), Jm1 = J - 1, K_max = max(K);
  matrix[K_max, J] log1m_p;
  vector[Jm1] log1m_P, log_phi_1mP;
  vector[I] log_lik = zeros_vector(I);
  for (i in 1:I) {
    int f = f_l[i, 1], l = f_l[i, 2];
    log1m_p[:, f:] = log1m_inv_logit(logit_p[i, :, f:]);
    for (k in 1:K[f]) {
      if (k != f_k[i]) {
        log_lik[i] += log1m_p[k, f] + y[i, f, k] * logit_p[i, k, f];
      }
    }
    if (f < J) {
      int fp1 = f + 1;
      for (j in fp1:J) {
        log1m_P[j - 1] = sum(log1m_p[1:K[j], j]);
      }
      log_phi_1mP[f:] = log_phi[f:, i] + log1m_P[f:];
      if (f < l) {
        log_lik[i] += sum(log_phi_1mP[f:l - 1])
                      + sum(rows_dot_product(to_matrix(y[i, fp1:l])',
                                             logit_p[i, :, fp1:l]));
      }
      if (l < J) {
        log_lik[i] += log1m_exp(log_sum_exp(cumulative_sum(log_phi_1mP[l:])
                                            - log1m_P[l:] 
                                            + log1m_exp(log1m_P[l:])));
      }
    }
  }
  return log_lik;
}

/** 
 * Multistate Cormack-Jolly-Seber individual log likelihoods. Function is
 * overloaded (first is much faster without individual effects):
 *  1. State-specific h, q, and p per survey
 *  2. State-specific h, q, and p per individual and survey
 *
 * @param y        Detection history
 * @param f_l      First and last survey detected
 * @param tau      survey intervals
 * @param h        Mortality hazard rates
 * @param q        Transition rates
 * @param logit_p  Detection logits
 *
 * @return  Individual log likelihoods
 */
vector cjs_ms(data array[,] int y, data array[,] int f_l, data vector tau, 
              matrix h, matrix q, matrix logit_p) {
  int I = size(y), J = size(y[1]), Jm1 = J - 1, S = rows(h);
  matrix[S, Jm1] log1m_p = log1m_inv_logit(logit_p);
  array[Jm1] matrix[S, S] P_z;
  for (j in 1:Jm1) {
    P_z[j] = log(matrix_exp(rate_matrix(h[:, j], q[j]) * tau[j]));
  }
  vector[S] Omega;
  vector[Jm1] log1m_chi;
  matrix[S, Jm1] chi;
  for (j in 1:Jm1) {
    for (s in 1:S) {
      Omega = P_z[j, s]' + log1m_p[:, j];
      log1m_chi[j] = log_sum_exp(Omega + logit_p[:, j]);
      for (jj in j + 1:Jm1) {
        Omega = log_prod_exp(P_z[jj]', Omega) + log1m_p[:, jj];
        log1m_chi[jj] = log_sum_exp(Omega + logit_p[:, jj]);
      }
      chi[s, j] = log1m_exp(log_sum_exp(log1m_chi[j:]));
    }
  }
  array[J] int y_i;
  vector[I] log_lik = zeros_vector(I);
  for (i in 1:I) {
    int f = f_l[i, 1], l = f_l[i, 2];
    y_i[f:l] = y[i, f:l];
    int y_j = y_i[f];
    if (f < l) {
      Omega = rep_vector(negative_infinity(), S);
      Omega[y_j] = 0;
      for (j in f + 1:l) {
        int jm1 = j - 1, y_jm1 = y_j;
        y_j = y_i[j];
        if (y_j) {
          real lp = y_jm1 ?
                    Omega[y_jm1] + P_z[jm1, y_jm1, y_j]
                    : log_sum_exp(Omega + P_z[jm1, :, y_j]);
          Omega = rep_vector(negative_infinity(), S);
          Omega[y_j] = lp + log1m_p[y_j, jm1] + logit_p[y_j, jm1];
        } else {
          Omega = y_jm1 ?
                  Omega[y_jm1] + P_z[jm1, y_jm1]'
                  : log_prod_exp(P_z[jm1]', Omega);
          Omega += log1m_p[:, jm1];
        }
      }
      log_lik[i] += Omega[y_j];
    }
    if (l < J) {
      log_lik[i] += chi[y_j, l];
    }
  }
  return log_lik;
}

vector cjs_ms(data array[,] int y, data array[,] int f_l, data vector tau, 
              array[] matrix h, array[] matrix q, array[] matrix logit_p) {
  int I = size(y), J = size(y[1]), Jm1 = J - 1, S = rows(h[1]);
  array[Jm1] matrix[S, S] P_z;
  matrix[S, Jm1] log1m_p;
  vector[S] Omega;
  vector[J] log1m_chi;
  array[J] int y_i;
  vector[I] log_lik = zeros_vector(I);
  for (i in 1:I) {
    int f = f_l[i, 1], l = f_l[i, 2];
    for (j in f:Jm1) {
      P_z[j] = log(matrix_exp(rate_matrix(h[i, :, j], q[i, j]) * tau[j]));
      log1m_p[:, j] = log1m_inv_logit(logit_p[i, :, j]);
    }
    y_i[f:l] = y[i, f:l];
    int y_j = y_i[f];
    if (f < l) {
      Omega = rep_vector(negative_infinity(), S);
      Omega[y_j] = 0;
      for (j in f + 1:l) {
        int jm1 = j - 1, y_jm1 = y_j;
        y_j = y_i[j];
        if (y_j) {
          real lp = y_jm1 ?
                    Omega[y_jm1] + P_z[jm1, y_jm1, y_j]
                    : log_sum_exp(Omega + P_z[jm1, :, y_j]);
          Omega = rep_vector(negative_infinity(), S);
          Omega[y_j] = lp + log1m_p[y_j, jm1] + logit_p[i, y_j, jm1];
        } else {
          Omega = y_jm1 ?
                  Omega[y_jm1] + P_z[jm1, y_jm1]'
                  : log_prod_exp(P_z[jm1]', Omega);
          Omega += log1m_p[:, jm1];
        }
      }
      log_lik[i] += Omega[y_j];
    }
    if (l < J) {
      int lp1 = l + 1;
      Omega = P_z[l, y_j]' + log1m_p[:, l];
      log1m_chi[lp1] = log_sum_exp(Omega + logit_p[i, :, l]);
      for (j in lp1 + 1:J) {
        int jm1 = j - 1;
        Omega = log_prod_exp(P_z[jm1]', Omega) + log1m_p[:, jm1];
        log1m_chi[j] = log_sum_exp(Omega + logit_p[i, :, jm1]);
      }
      log_lik[i] += log1m_exp(log_sum_exp(log1m_chi[lp1:]));
    }
  }
  return log_lik;
}

/** 
 * Robust design multistate Cormack-Jolly-Seber individual log likelihoods.
 * Function is overloaded (first is much faster without individual effects):
 *  1. State-specific h, q, and logit_p per survey
 *  2. State-specific h, q, and logit_p per individual and survey/secondary
 *
 * @param y        Detection history
 * @param f_l      First and last survey detected
 * @param tau      Survey intervals
 * @param f_k      First secondary of f detected
 * @param K        Number of secondaries per survey
 * @param h        Mortality hazard rates
 * @param q        Transition rates
 * @param logit_p  Detection logits
 *
 * @return  Individual log likelihoods
 */
vector cjs_ms_rd(data array[,,] int y, data array[,] int f_l, data vector tau, 
                 data array[] int f_k, data array[] int K, matrix h, matrix q, 
                 array[] matrix logit_p) {
  int I = size(y), J = size(y[1]), Jm1 = J - 1, S = rows(h), K_max = max(K);
  array[Jm1] matrix[S, S] P_z;
  for (j in 1:Jm1) {
    P_z[j] = log(matrix_exp(rate_matrix(h[:, j], q[j]) * tau[j]));
  }
  array[J] matrix[S, K_max] log1m_p = log1m_inv_logit(logit_p);
  matrix[S, J] log1m_P, log_P;
  for (j in 1:J) {
    for (s in 1:S) {
      log1m_P[s, j] = sum(log1m_p[j, s, 1:K[j]]);
    }
  }
  log_P = log1m_exp(log1m_P);
  vector[S] Omega;
  vector[Jm1] log1m_chi;
  matrix[S, Jm1] chi;
  for (j in 1:Jm1) {
    int jp1 = j + 1;
    for (s in 1:S) {
      Omega = P_z[j, s]' + log1m_P[:, jp1];
      log1m_chi[j] = log_sum_exp(Omega - log1m_P[:, jp1] + log_P[:, jp1]);
      for (jj in jp1:Jm1) {
        int jjp1 = jj + 1;
        Omega = log_prod_exp(P_z[jj]', Omega) + log1m_P[:, jjp1];
        log1m_chi[jj] = log_sum_exp(Omega - log1m_P[:, jjp1] + log_P[:, jjp1]);
      }
      chi[s, j] = log1m_exp(log_sum_exp(log1m_chi[j:]));
    }
  }
  array[J, K_max] int y_i;
  vector[I] log_lik;
  for (i in 1:I) {
    int f = f_l[i, 1], l = f_l[i, 2];
    y_i[f:l] = y[i, f:l];
    int y_j = y_i[f, f_k[i]];
    Omega = rep_vector(negative_infinity(), S);
    Omega[y_j] = 0;
    for (k in 1:K[f]) {
      if (k != f_k[i]) {
        Omega[y_j] += log1m_p[f, y_j, k] 
                      + (y_i[f, k] == y_j) * logit_p[f, y_j, k];
      }
    }
    for (j in f + 1:l) {
      int jm1 = j - 1, y_jm1 = y_j;
      y_j = max(y_i[j]);
      if (y_j) {
        real lp = y_jm1 ?
                  Omega[y_jm1] + P_z[jm1, y_jm1, y_j]
                  : log_sum_exp(Omega + P_z[jm1, :, y_j]);
        lp += log1m_P[y_j, j];
        for (k in 1:K[j]) {
          lp += (y_i[j, k] == y_j) * logit_p[j, y_j, k];
        }
        Omega = rep_vector(negative_infinity(), S);
        Omega[y_j] = lp;
      } else {
        Omega = y_jm1 ? 
                Omega[y_jm1] + P_z[jm1, y_jm1]'
                : log_prod_exp(P_z[jm1]', Omega);
        Omega += log1m_P[:, j];
      }
    }
    log_lik[i] = Omega[y_j];
    if (l < J) {
      log_lik[i] += chi[y_j, l];
    }
  }
  return log_lik;
}

vector cjs_ms_rd(data array[,,] int y, data array[,] int f_l, data vector tau, 
                 data array[] int f_k, data array[] int K, array[] matrix h, 
                 array[] matrix q, array[,] matrix logit_p) {
  int I = size(y), J = size(y[1]), Jm1 = J - 1, S = rows(h[1]), K_max = max(K);
  array[Jm1] matrix[S, S] P_z;
  array[J] matrix[S, K_max] log1m_p;
  matrix[S, J] log1m_P;
  vector[S] Omega;
  vector[J] log1m_chi;
  array[J, K_max] int y_i;
  vector[I] log_lik;
  for (i in 1:I) {
    int f = f_l[i, 1], l = f_l[i, 2];
    for (j in f:Jm1) {
      P_z[j] = log(matrix_exp(rate_matrix(h[i, :, j], q[i, j]) * tau[j]));
    }
    log1m_p[f:] = log1m_inv_logit(logit_p[i, f:]);
    y_i[f:l] = y[i, f:l];
    int y_j = y_i[f, f_k[i]];
    Omega = rep_vector(negative_infinity(), S);
    Omega[y_j] = 0;
    for (k in 1:K[f]) {
      if (k != f_k[i]) {
        Omega[y_j] += log1m_p[f, y_j, k]
                      + (y_i[f, k] == y_j) * logit_p[i, f, y_j, k];
      }
    }
    for (j in f + 1:J) {
      for (s in 1:S) {
        log1m_P[s, j] = sum(log1m_p[j, s, 1:K[j]]);
      }
    }
    for (j in f + 1:l) {
      int jm1 = j - 1, y_jm1 = y_j;
      y_j = max(y_i[j]);
      if (y_j) {
        real lp = y_jm1 ?
                  Omega[y_jm1] + P_z[jm1, y_jm1, y_j]
                  : log_sum_exp(Omega + P_z[jm1, :, y_j]);
        lp += log1m_P[y_j, j];
        for (k in 1:K[j]) {
          lp += (y_i[j, k] == y_j) * logit_p[i, j, y_j, k];
        }
        Omega = rep_vector(negative_infinity(), S);
        Omega[y_j] = lp;
      } else {
        Omega = y_jm1 ? 
                Omega[y_jm1] + P_z[jm1, y_jm1]'
                : log_prod_exp(P_z[jm1]', Omega);
        Omega += log1m_P[:, j];
      }
    }
    log_lik[i] = Omega[y_j];
    if (l < J) {
      int lp1 = l + 1;
      Omega = P_z[l, y_j]' + log1m_P[:, lp1];
      log1m_chi[lp1] = log_sum_exp(Omega - log1m_P[:, lp1]
                                   + log1m_exp(log1m_P[:, lp1]));
      for (j in lp1 + 1:J) {
        Omega = log_prod_exp(P_z[j - 1]', Omega) + log1m_P[:, j];
        log1m_chi[j] = log_sum_exp(Omega - log1m_P[:, j] 
                                   + log1m_exp(log1m_P[:, j]));
      }
      log_lik[i] += log1m_exp(log_sum_exp(log1m_chi[lp1:]));
    }
  }
  return log_lik;
}
